}
clear
calculate_weighted_average(test_df_noNA, verbose=TRUE)
calculate_weighted_average <- function(data_frame_input, verbose=FALSE) {
if (ncol({{ data_frame_input }}) > 3) {
warning("Truncating dataframe to have most recent three years...")
truncated_df  <- {{ data_frame_input }}[,(ncol({{ data_frame_input }})-2):ncol({{ data_frame_input }})]
} else if (ncol({{ data_frame_input }}) < 2) {
stop("You have than the acceptable number of years to apply to Medical school. Consider applying in the future...")
}
## Weight second most recent year of GPA as x2, and most recent year of GPA as x3
truncated_df[,2] <- {{ truncated_df }}[,2] * 2
truncated_df[,3] <- {{ truncated_df }}[,3] * 3
## Calculate the number of non-NA values.
first <- sum(!is.na({{ truncated_df }}[,1]))
second <- sum(!is.na({{ truncated_df }}[,2]))
third <- sum(!is.na({{ truncated_df }}[,3]))
## get the weighted n needed for means
weighted_val <- first + second * 2 + third * 3
if (verbose == TRUE){
message(cat("\nThe weighted value of the first year is: ",first_row_val))
message(cat("The weighted value of the second year is: ",second_row_val))
message(cat("The weighted value of the third year is: ",third_row_val))
}
## sum the values in the columns and return the output
return ((sum(truncated_df[,1],na.rm = TRUE)+sum(truncated_df[,2],na.rm = TRUE)+sum(truncated_df[,3],na.rm = TRUE))/weighted_val)
}
calculate_weighted_average(test_df_noNA, verbose=TRUE)
calculate_weighted_average <- function(data_frame_input, verbose=FALSE) {
if (ncol({{ data_frame_input }}) > 3) {
warning("Truncating dataframe to have most recent three years...")
truncated_df  <- {{ data_frame_input }}[,(ncol({{ data_frame_input }})-2):ncol({{ data_frame_input }})]
} else if (ncol({{ data_frame_input }}) < 2) {
stop("You have than the acceptable number of years to apply to Medical school. Consider applying in the future...")
}
## Weight second most recent year of GPA as x2, and most recent year of GPA as x3
truncated_df[,2] <- {{ truncated_df }}[,2] * 2
truncated_df[,3] <- {{ truncated_df }}[,3] * 3
## Calculate the number of non-NA values.
first <- sum(!is.na({{ truncated_df }}[,1]))
second <- sum(!is.na({{ truncated_df }}[,2]))
third <- sum(!is.na({{ truncated_df }}[,3]))
## get the weighted n needed for means
weighted_val <- first + second * 2 + third * 3
if (verbose == TRUE){
message(cat("\nThe total weighted value of the first year is: ",weighted_val))
}
## sum the values in the columns and return the output
return ((sum(truncated_df[,1],na.rm = TRUE)+sum(truncated_df[,2],na.rm = TRUE)+sum(truncated_df[,3],na.rm = TRUE))/weighted_val)
}
calculate_weighted_average(test_df_noNA, verbose=TRUE)
calculate_weighted_average <- function(data_frame_input, verbose=FALSE, weight_of_most_recent_GPA = 3, weight_of_second_most_recent_GPA = 2) {
if (ncol(data_frame_input) > 3) {
warning("Truncating dataframe to have most recent three years...")
truncated_df <- data_frame_input[,(ncol(data_frame_input)-2):ncol(data_frame_input)]
} else if (ncol(data_frame_input) < 2) {
stop("You have less than the acceptable number of years to apply to Medical school. Consider applying in the future...")
}
## Weight second most recent year of GPA as x2, and most recent year of GPA as x3
truncated_df[,2] <- truncated_df[,2] * weight_of_second_most_recent_GPA
truncated_df[,3] <- truncated_df[,3] * weight_of_most_recent_GPA
## Calculate the number of non-NA values.
first <- sum(!is.na(truncated_df[,1]))
second <- sum(!is.na(truncated_df[,2]))
third <- sum(!is.na(truncated_df[,3]))
## get the n needed for means
weighted_val <- first + second * weight_of_second_most_recent_GPA + third * weight_of_most_recent_GPA
## sum the values in the columns
first_row_val <- sum(truncated_df[,1],na.rm = TRUE)
second_row_val <- sum(truncated_df[,2],na.rm = TRUE)
third_row_val <- sum(truncated_df[,3],na.rm = TRUE)
if (verbose == TRUE){
message(cat("\nThe weighted value of the first year is: ",first_row_val))
message(cat("The weighted value of the second year is: ",second_row_val))
message(cat("The weighted value of the third year is: ",third_row_val))
}
## return the output
return ((first_row_val+second_row_val+third_row_val)/weighted_val)
}
calculate_weighted_average(test_df_noNA, verbose=TRUE)
calculate_weighted_average <- function(data_frame_input, verbose=FALSE, weight_of_most_recent_GPA = 3, weight_of_second_most_recent_GPA = 2) {
if (ncol(data_frame_input) > 3) {
warning("Truncating dataframe to have most recent three years...")
truncated_df <- data_frame_input[,(ncol(data_frame_input)-2):ncol(data_frame_input)]
} else if (ncol(data_frame_input) < 2) {
stop("You have less than the acceptable number of years to apply to Medical school. Consider applying in the future...")
}
## Weight second most recent year of GPA as x2, and most recent year of GPA as x3
truncated_df[,2] <- {{ truncated_df[,2] }} * weight_of_second_most_recent_GPA
truncated_df[,3] <- {{ truncated_df[,3] }} * weight_of_most_recent_GPA
## Calculate the number of non-NA values.
first <- sum(!is.na(truncated_df[,1]))
second <- sum(!is.na(truncated_df[,2]))
third <- sum(!is.na(truncated_df[,3]))
## get the n needed for means
weighted_val <- first + second * weight_of_second_most_recent_GPA + third * weight_of_most_recent_GPA
## sum the values in the columns
first_row_val <- sum(truncated_df[,1],na.rm = TRUE)
second_row_val <- sum(truncated_df[,2],na.rm = TRUE)
third_row_val <- sum(truncated_df[,3],na.rm = TRUE)
if (verbose == TRUE){
message(cat("\nThe weighted value of the first year is: ",first_row_val))
message(cat("The weighted value of the second year is: ",second_row_val))
message(cat("The weighted value of the third year is: ",third_row_val))
}
## return the output
return ((first_row_val+second_row_val+third_row_val)/weighted_val)
}
calculate_weighted_average(test_df_noNA, verbose=TRUE)
calculate_weighted_average <- function(data_frame_input, verbose=FALSE, weight_of_most_recent_GPA = 3, weight_of_second_most_recent_GPA = 2) {
if (ncol(data_frame_input) > 3) {
warning("Truncating dataframe to have most recent three years...")
truncated_df <- data_frame_input[,(ncol(data_frame_input)-2):ncol(data_frame_input)]
} else if (ncol(data_frame_input) < 2) {
stop("You have less than the acceptable number of years to apply to Medical school. Consider applying in the future...")
}
## Weight second most recent year of GPA as x2, and most recent year of GPA as x3
truncated_df[,2] <- {{ truncated_df[,2] }} * weight_of_second_most_recent_GPA
truncated_df[,3] <- {{ truncated_df[,3] }} * weight_of_most_recent_GPA
## Calculate the number of non-NA values.
{{ first }} <- sum(!is.na(truncated_df[,1]))
{{ second }} <- sum(!is.na(truncated_df[,2]))
{{ third }} <- sum(!is.na(truncated_df[,3]))
## get the n needed for means
weighted_val <- first + second * weight_of_second_most_recent_GPA + third * weight_of_most_recent_GPA
## sum the values in the columns
first_row_val <- sum(truncated_df[,1],na.rm = TRUE)
second_row_val <- sum(truncated_df[,2],na.rm = TRUE)
third_row_val <- sum(truncated_df[,3],na.rm = TRUE)
if (verbose == TRUE){
message(cat("\nThe weighted value of the first year is: ",first_row_val))
message(cat("The weighted value of the second year is: ",second_row_val))
message(cat("The weighted value of the third year is: ",third_row_val))
}
## return the output
return ((first_row_val+second_row_val+third_row_val)/weighted_val)
}
calculate_weighted_average(test_df_noNA, verbose=TRUE)
calculate_weighted_average <- function(data_frame_input, verbose=FALSE, weight_of_most_recent_GPA = 3, weight_of_second_most_recent_GPA = 2) {
if (ncol(data_frame_input) > 3) {
warning("Truncating dataframe to have most recent three years...")
truncated_df <- data_frame_input[,(ncol(data_frame_input)-2):ncol(data_frame_input)]
} else if (ncol(data_frame_input) < 2) {
stop("You have less than the acceptable number of years to apply to Medical school. Consider applying in the future...")
}
## Weight second most recent year of GPA as x2, and most recent year of GPA as x3
truncated_df[,2] <- {{ truncated_df[,2] }} * {{ weight_of_second_most_recent_GPA }}
truncated_df[,3] <- {{ truncated_df[,3] }} * {{ weight_of_most_recent_GPA }}
## Calculate the number of non-NA values.
{{ first }} <- sum(!is.na(truncated_df[,1]))
{{ second }} <- sum(!is.na(truncated_df[,2]))
{{ third }} <- sum(!is.na(truncated_df[,3]))
## get the n needed for means
weighted_val <- first + second * {{ weight_of_second_most_recent_GPA }} + third * {{ weight_of_most_recent_GPA }}
## sum the values in the columns
first_row_val <- sum(truncated_df[,1],na.rm = TRUE)
second_row_val <- sum(truncated_df[,2],na.rm = TRUE)
third_row_val <- sum(truncated_df[,3],na.rm = TRUE)
if (verbose == TRUE){
message(cat("\nThe weighted value of the first year is: ",first_row_val))
message(cat("The weighted value of the second year is: ",second_row_val))
message(cat("The weighted value of the third year is: ",third_row_val))
}
## return the output
return ((first_row_val+second_row_val+third_row_val)/weighted_val)
}
calculate_weighted_average(test_df_noNA, verbose=TRUE)
calculate_weighted_average <- function(data_frame_input, verbose=FALSE, weight_of_most_recent_GPA = 3, weight_of_second_most_recent_GPA = 2) {
if (ncol(data_frame_input) > 3) {
warning("Truncating dataframe to have most recent three years...")
truncated_df <- data_frame_input[,(ncol(data_frame_input)-2):ncol(data_frame_input)]
} else if (ncol(data_frame_input) < 2) {
stop("You have less than the acceptable number of years to apply to Medical school. Consider applying in the future...")
}
## Weight second most recent year of GPA as x2, and most recent year of GPA as x3
truncated_df[,2] <- {{ truncated_df[,2] }} * {{ weight_of_second_most_recent_GPA }}
truncated_df[,3] <- {{ truncated_df[,3] }} * {{ weight_of_most_recent_GPA }}
## Calculate the number of non-NA values.
first  <- sum(!is.na(truncated_df[,1]))
second <- sum(!is.na(truncated_df[,2]))
third  <- sum(!is.na(truncated_df[,3]))
## get the n needed for means
weighted_val <- first + second * {{ weight_of_second_most_recent_GPA }} + third * {{ weight_of_most_recent_GPA }}
## sum the values in the columns
first_row_val <- sum(truncated_df[,1],na.rm = TRUE)
second_row_val <- sum(truncated_df[,2],na.rm = TRUE)
third_row_val <- sum(truncated_df[,3],na.rm = TRUE)
if (verbose == TRUE){
message(cat("\nThe weighted value of the first year is: ",first_row_val))
message(cat("The weighted value of the second year is: ",second_row_val))
message(cat("The weighted value of the third year is: ",third_row_val))
}
## return the output
return ((first_row_val+second_row_val+third_row_val)/weighted_val)
}
calculate_weighted_average(test_df_noNA, verbose=TRUE)
calculate_weighted_average <- function(data_frame_input, verbose=FALSE, weight_of_most_recent_GPA = 3, weight_of_second_most_recent_GPA = 2) {
if (ncol({{ data_frame_input }}) > 3) {
warning("Truncating dataframe to have most recent three years...")
truncated_df  <- {{ data_frame_input }}[,(ncol({{ data_frame_input }})-2):ncol({{ data_frame_input }})]
} else if (ncol({{ data_frame_input }}) < 2) {
stop("You have than the acceptable number of years to apply to Medical school. Consider applying in the future...")
}
## Weight second most recent year of GPA as x2, and most recent year of GPA as x3
truncated_df[,2] <- {{ truncated_df[,2] }} * {{ weight_of_second_most_recent_GPA }}
truncated_df[,3] <- {{ truncated_df[,3] }} * {{ weight_of_most_recent_GPA }}
## get the n needed for means by summing over all the columns
weighted_val <- sum(!is.na(truncated_df[,1])) + sum(!is.na(truncated_df[,2])) * {{ weight_of_second_most_recent_GPA }} + sum(!is.na(truncated_df[,3])) * {{ weight_of_most_recent_GPA }}
if (verbose == TRUE){
message(cat("\nThe total weighted value of the first year is: ",weighted_val))
}
## sum the values in the columns and return the output
return ((sum(truncated_df[,1],na.rm = TRUE)+sum(truncated_df[,2],na.rm = TRUE)+sum(truncated_df[,3],na.rm = TRUE))/weighted_val)
}
calculate_weighted_average(test_df_noNA, verbose=TRUE)
typeof(x)
test_that("test using dataset without NA", {
expect_equal(sin(pi / 4), 1 / sqrt(2))
expect_equal(cos(pi / 4), 1 / sqrt(2))
expect_equal(tan(pi / 4), 1)
})
library("testthat")
test_that("test using dataset without NA", {
expect_equal(sin(pi / 4), 1 / sqrt(2))
expect_equal(cos(pi / 4), 1 / sqrt(2))
expect_equal(tan(pi / 4), 1)
})
calculate_weighted_average(test_df_noNA, verbose=TRUE)
calculate_weighted_average(test_df_withNA, verbose=TRUE)
test_that("test using dataset without NA", {
expect_equal(calculate_weighted_average(test_df_noNA, verbose=TRUE), 3.33)
expect_equal(calculate_weighted_average(test_df_withNA, verbose=TRUE)
, 3.22)
})
test_df_with_empty_col <- data.frame("Year1" = c(), "Year2" = c(4,NA,3.3,NA,4), "Year3" = c(4,2.7,2.7,2.7,3), "Year4" = c(2.7,3.7,NA,3.3,3.3))
test_df_with_string <- data.frame("Year1" = c("si",4,2,2.1,2), "Year2" = c(4,NA,3.3,NA,4), "Year3" = c(4,2.7,2.7,2.7,3), "Year4" = c(2.7,3.7,NA,3.3,3.3))
test_df_with_string <- data.frame("Year1" = c("si",4,2,2.1,2), "Year2" = c(4,NA,3.3,NA,4), "Year3" = c(4,2.7,2.7,2.7,3), "Year4" = c(2.7,3.7,NA,3.3,3.3))
expect_equal(calculate_weighted_average(test_df_with_string, verbose=TRUE)
, 3.22)
library(distplyr)
install.packages("distplyr")
devtools::install_github("vincenzocoia/distplyr")
library("distplyr")
(val <- penguins %>%
group_by(species) %>%
summarise(new_mean = mean(body_mass_g, na.rm=TRUE),
var = var(body_mass_g, na.rm =TRUE)) %>%
mutate(distribution = map2(mean, var, dst_norm),
quantile = map_dbl(distribution, eval_quantile, at = 0.95))
)
library("penguins")
library("palmerpenguins")
(val <- penguins %>%
group_by(species) %>%
summarise(new_mean = mean(body_mass_g, na.rm=TRUE),
var = var(body_mass_g, na.rm =TRUE)) %>%
mutate(distribution = map2(mean, var, dst_norm),
quantile = map_dbl(distribution, eval_quantile, at = 0.95))
)
library("tidyverse")
(val <- penguins %>%
group_by(species) %>%
summarise(new_mean = mean(body_mass_g, na.rm=TRUE),
var = var(body_mass_g, na.rm =TRUE)) %>%
mutate(distribution = map2(mean, var, dst_norm),
quantile = map_dbl(distribution, eval_quantile, at = 0.95))
)
(val <- penguins %>%
group_by(species) %>%
summarise(new_mean = mean(body_mass_g, na.rm=TRUE),
var = var(body_mass_g, na.rm =TRUE)) %>%
mutate(distribution = map2(new_mean, var, dst_norm),
quantile = map_dbl(distribution, eval_quantile, at = 0.95))
)
penguins
val$distribution
val$distribution[[2]]
penguins
chin <- val$distribution[[2]]
eval_quantile(chin, at = 0.95)
(val <- penguins %>%
#group_by(island) %>%
summarise(new_mean = mean(body_mass_g, na.rm=TRUE),
var = var(body_mass_g, na.rm =TRUE)) %>%
#below we convert to a list column
mutate(distribution = map2(new_mean, var, dst_norm), #dst_norm is function we apply, first two are vectors or list that you want to operate on
#distributon = list of distribution
quantile = map_dbl(distribution, eval_quantile, at = 0.95)) #convert to regular column
)
(val <- penguins %>%
#group_by(island) %>%
summarise(new_mean = mean(body_mass_g, na.rm=TRUE),
var = var(body_mass_g, na.rm =TRUE)) %>%
#below we convert to a list column
mutate(distribution = map2(new_mean, var, dst_norm)#, #dst_norm is function we apply, first two are vectors or list that you want to operate on
#distributon = list of distribution
#quantile = map_dbl(distribution, eval_quantile, at = 0.95)) #convert to regular column
)
(val <- penguins %>%
#group_by(island) %>%
summarise(new_mean = mean(body_mass_g, na.rm=TRUE),
var = var(body_mass_g, na.rm =TRUE)) %>%
#below we convert to a list column
mutate(distribution = map2(new_mean, var, dst_norm))#, #dst_norm is function we apply, first two are vectors or list that you want to operate on
#distributon = list of distribution
#quantile = map_dbl(distribution, eval_quantile, at = 0.95)) #convert to regular column
)
(val <- penguins %>%
#group_by(island) %>%
summarise(new_mean = mean(body_mass_g, na.rm=TRUE),
var = var(body_mass_g, na.rm =TRUE)) %>%
#below we convert to a list column
mutate(distribution = map2(new_mean, var, dst_norm))#, #dst_norm is function we apply, first two are vectors or list that you want to operate on
#distributon = list of distribution
#quantile = map_dbl(distribution, eval_quantile, at = 0.95)) #convert to regular column
)
View(val)
View(val)
penguins
enframe_quantile(chin, at = 1:9/10)
demo1a %>%
mutate(quantile = map(distribution, enframe_quantile, at = c(0.25, 0.5,0.75, 1)))
(val <- penguins %>%
nest(data = body_mass_g) %>%
#group_by(island) %>%
summarise(new_mean = mean(body_mass_g, na.rm=TRUE),
var = var(body_mass_g, na.rm =TRUE)) %>%
#below we convert to a list column
mutate(distribution = map2(new_mean, var, dst_norm))#, #dst_norm is function we apply, first two are vectors or list that you want to operate on
#distributon = list of distribution
#quantile = map_dbl(distribution, eval_quantile, at = 0.95)) #convert to regular column
)
penguins
(val <- penguins %>%
nest(data = body_mass_g) %>% #list of tibble
mutate(s = map_dbl(data, ~lm(.x$bill_length_mm ~ .x$body_mass_g)))
(val <- penguins %>%
nest(data = body_mass_g) %>% #list of tibble
mutate(s = map_dbl(data, ~lm(.x$bill_length_mm ~ .x$body_mass_g))))
View(val)
penguins
(val <- penguins %>%
nest(data = c(body_mass_g,bill_length_mm)) %>% #list of tibble
mutate(s = map_dbl(data, ~lm(.x$bill_length_mm ~ .x$body_mass_g))))
(val <- penguins %>%
nest(data = c(body_mass_g,bill_length_mm)) %>% #list of tibble
mutate(s = map_dbl(data, ~lm(bill_length_mm ~ body_mass_g))))
(val <- penguins %>%
nest(data = c(body_mass_g,bill_length_mm)) %>% #list of tibble
mutate(s = map_dbl(data, ~lm(.x$bill_length_mm ~ .x$body_mass_g))))
(val <- penguins %>%
nest(data = c(body_mass_g,bill_length_mm)) %>% #list of tibble
mutate(s = map(data, ~lm(.x$bill_length_mm ~ .x$body_mass_g))))
(val <- penguins %>%
nest(data = c(body_mass_g,bill_length_mm)) %>% #list of tibble
mutate(s = map2(data, ~lm(.x$bill_length_mm ~ .x$body_mass_g))))
(val <- penguins %>%
nest(data = c(body_mass_g,bill_length_mm)) %>% #list of tibble
mutate(s = map(data, ~lm(.x$bill_length_mm ~ .x$body_mass_g))))
(val <- penguins %>%
nest(data = c(body_mass_g,bill_length_mm)) %>% #list of tibble
mutate(s = map_dbl(data, ~lm(.x$bill_length_mm ~ .x$body_mass_g))))
(val <- penguins %>%
select(body_mass_g,bill_length_mm ) %>%
nest(data = c(body_mass_g,bill_length_mm)) %>% #list of tibble
mutate(s = map(data, ~lm(.x$bill_length_mm ~ .x$body_mass_g))))
(val <- penguins %>%
group_by(island) %>%
select(island,body_mass_g,bill_length_mm) %>%
nest(data = c(body_mass_g,bill_length_mm)) %>% #list of tibble
mutate(s = map(data, ~lm(.x$bill_length_mm ~ .x$body_mass_g))))
(val <- penguins %>%
group_by(island) %>%
select(island,body_mass_g,bill_length_mm) %>%
nest(data = c(body_mass_g,bill_length_mm)) %>% #list of tibble
mutate(model = map(data, ~lm(.x$bill_length_mm ~ .x$body_mass_g))))
penguins
penguins
(val <- penguins %>%
group_by(island) %>%
select(island,body_mass_g,bill_length_mm) %>%
nest(data = c(body_mass_g,bill_length_mm)) %>% #list of tibble
mutate(model = map(data, ~lm(.x$bill_length_mm ~ .x$body_mass_g))))
#chin <- val$distribution[[2]]
#eval_quantile(chin, at = 0.95) ##evaluate quantiles at vector of 1:9/10, giving dataframe with quantiles themselves and quantile level you're evaluating
#plot(chin, "density")
#26 mins he does it so he works without making a list
(model_peng <- penguins %>%
group_by(island) %>%
select(island,body_mass_g,bill_length_mm) %>%
nest(data = c(body_mass_g,bill_length_mm)) %>% #list of tibble
mutate(model = map(data, ~lm(.x$bill_length_mm ~ .x$body_mass_g))))
model_peng <- penguins %>%
group_by(island) %>%
select(island,body_mass_g,bill_length_mm) %>%
nest(data = c(body_mass_g,bill_length_mm)) %>% #list of tibble
mutate(model = map(data, ~lm(.x$bill_length_mm ~ .x$body_mass_g)))
(val <- model_peng %>%
mutate(prediction = predict(model, data = tibble(x = 1:10))))
(val <- model_peng %>%
transmute(continent, yhat = map(model, broom::augment)) %>%
unnest(yhat))
(val <- model_peng %>%
transmute(bill_length_mm, yhat = map(model, broom::augment)) %>%
unnest(yhat))
(val <- model_peng %>%
transmute(model, yhat = map(model, broom::augment)) %>%
unnest(yhat))
(val <- model_peng %>%
mutate(model, yhat = map(model, broom::augment)) %>%
unnest(yhat))
penguins
(val <- model_peng %>%
mutate(prediction = predict(model, data = tibble(x = 1:10))))
(val <- model_peng %>%
mutate(yhat = map(model, broom::augment)) %>%
unnest(yhat))
View(model_peng)
(val <- model_peng %>%
mutate(yhat = map(model, broom::augment)) %>%
unnest(yhat))
model_peng <- penguins %>%
group_by(island) %>%
select(island,body_mass_g,bill_length_mm) %>%
nest(data = c(body_mass_g,bill_length_mm)) %>% #list of tibble
mutate(model = map(data, ~lm(.x$bill_length_mm ~ .x$body_mass_g)))
(val <- model_peng %>%
mutate(yhat = map(model, broom::augment)) %>%
unnest(yhat))
(val <- model_peng %>%
mutate(yhat = map(model, broom::augment)) )
penguins
model_peng <- penguins %>%
group_by(species) %>%
select(species,body_mass_g,bill_length_mm) %>%
nest(data = c(body_mass_g,bill_length_mm)) %>% #list of tibble
mutate(model = map(data, ~lm(.x$bill_length_mm ~ .x$body_mass_g)))
(model_peng <- penguins %>%
group_by(species) %>%
select(species,body_mass_g,bill_length_mm) %>%
nest(data = c(body_mass_g,bill_length_mm)) %>% #list of tibble
mutate(model = map(data, ~lm(.x$bill_length_mm ~ .x$body_mass_g))))
(val <- model_peng %>%
mutate(yhat = map(model, broom::augment)) %>%
unnest(yhat))
gapminder
model_peng <- gapminder %>%
group_by(continent) %>%
select(continent,lifeExp,pop) %>%
nest(data = c(lifeExp,pop)) %>% #list of tibble
mutate(model = map(data, ~lm(.x$pop ~ .x$lifeExp)))
(model_peng <- penguins %>%
group_by(continent) %>%
select(continent,lifeExp,pop) %>%
nest(data = c(lifeExp,pop)) %>% #list of tibble
mutate(model = map(data, ~lm(.x$pop ~ .x$lifeExp))))
(model_peng <- gapminder %>%
group_by(continent) %>%
select(continent,lifeExp,pop) %>%
nest(data = c(lifeExp,pop)) %>% #list of tibble
mutate(model = map(data, ~lm(.x$pop ~ .x$lifeExp))))
(model_peng <- gapminder %>%
group_by(continent) %>%
select(continent,lifeExp,pop) %>%
nest(data = c(lifeExp,pop)) %>% #list of tibble
mutate(model = map(data, ~lm(.x$lifeExp~.x$pop ))))
model_peng <- gapminder %>%
group_by(continent) %>%
select(continent,lifeExp,pop) %>%
nest(data = c(lifeExp,pop)) %>% #list of tibble
mutate(model = map(data, ~lm(.x$lifeExp~.x$pop )))
(val <- model_peng %>%
mutate(yhat = map(model, broom::augment)) %>%
unnest(yhat))
(val <- model_peng %>%
mutate(yhat = map(model, broom::augment)))
chin <- val$yhat[[1]]
chin <- val$yhat[[1]]
plot(chin)
chin <- val$yhat[[2]]
plot(chin)
(val <- model_peng %>%
mutate(yhat = map(model, broom::augment)) %>%
unnest(yhat))
library("devtools")
create_package(powers)
create_package("powers")
getwd()
create_package("/Users/owner/Document/UBC/STAT545/powers/")
create_package("/Users/owner/Documents/UBC/STAT545/powers/")
create_package("/Users/owner/Documents/UBC/STAT545_powers/")
create_package("/Users/owner/Documents/UBC/STAT545powers/")
library(rosalindR)
library(devtools)
create_question("hi","~/.","ok")
create_question()
create_question
use_package("tools")
getwd()
setwd("/Users/owner/Documents/rosalindR")
use_package("tools")
getwd()
use_package("tools")
rprojroot::find_rstudio_root_file()
use_package("tools")
getwd()
create_question("hi")
library("create_function")
library("devtools")
create_package(rosalindR)
create_package("rosalindR")
getwd()
